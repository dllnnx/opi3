import javax.xml.parsers.DocumentBuilderFactory

plugins {
  id 'java'
  id 'war'
}

group 'org.example'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.9.2'
  seleniumVersion = '4.21.0'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

sourceSets {
  functionalTest {
    java.srcDir file('src/functionalTest/java')
    resources.srcDir file('src/functionalTest/resources')
    compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
    runtimeClasspath += output + compileClasspath
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('functionalTest', Test) {
  description = "Запуск функциональных (Selenium) тестов"
  group = "verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  shouldRunAfter test
  useJUnitPlatform()
}

check.dependsOn functionalTest

tasks.register('compile') {
  group = "build"
  description = "Компиляция исходных кодов проекта"

  dependsOn(classes, tasks.compileJava)
}

build {
  group = "build"
  description = "Компиляция исходных кодов и упаковка в jar"

  dependsOn(tasks.compile)
}

clean {
  group = "build"
  description = "Удаление скомпилированных классов проекта и всех временных файлов"
}

test {
  group = "verification"
  description = "Запуск junit-тестов проекта после сборки"

  useJUnitPlatform()
}

tasks.register("xml") {
  group = 'verification'
  description = 'Валидация всех XML-файлов в проекте'

  doLast {
    def xmlFiles = fileTree(".") {
      include '**/*.xml'
    }

    def factory = DocumentBuilderFactory.newInstance()
    factory.setNamespaceAware(true)

    xmlFiles.each { File xmlFile ->
      try {
        def builder = factory.newDocumentBuilder()
        builder.parse(xmlFile)
//        println "XML is valid: ${xmlFile}"
      } catch (Exception e) {
        println "Error in xml: ${xmlFile} — ${e.message}"
        throw new GradleException("XML validation failed for ${xmlFile}")
      }
    }

    println "All XML files are valid."
  }
}

tasks.register('diff') {
  group = 'versioning'
  description = 'Проверка изменений и автоматический commit отслеживаемых в gradle.properties классов'

  doLast {
    def properties = new Properties()
    file('gradle.properties').withInputStream { properties.load(it) }

    def classesToCheck = properties.getProperty('checkDiffClasses', '').split(',')

    if (classesToCheck.length == 0) {
      println "No classes to check for changes."
      return
    }

    def gitStatus = 'git status --porcelain'.execute().text
    def filesToCommit = []
    classesToCheck.each { className ->
      if (gitStatus.contains(className)) {
        filesToCommit.add(className)
      }
    }

    if (filesToCommit.isEmpty()) {
      println "No changes in specified classes."
      return
    }

    def addFilesCommand = "git add ${filesToCommit.join(' ')}".execute()
    addFilesCommand.waitFor()

    if (addFilesCommand.exitValue() == 0) {
      println "Files added to commit: ${filesToCommit}"
    } else {
      println "Error while adding files to commit: ${addFilesCommand.err.text}"
      return
    }

    def commitMessage = "Автоматический коммит изменений для классов: ${filesToCommit.join(', ')}"
    def gitCommitCommand = "git commit -m \"${commitMessage}\"".execute()

    gitCommitCommand.waitFor()

    if (gitCommitCommand.exitValue() == 0) {
      println "Commit successful."
    } else {
      println "Error while commiting: ${gitCommitCommand.exitValue()}"
    }
  }
}

dependencies {
  compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0')
  compileOnly('jakarta.ejb:jakarta.ejb-api:4.0.0')
  compileOnly('jakarta.persistence:jakarta.persistence-api:3.0.0')
  compileOnly('jakarta.ws.rs:jakarta.ws.rs-api:3.0.0')
  compileOnly('jakarta.servlet:jakarta.servlet-api:5.0.0')
  implementation 'jakarta.platform:jakarta.jakartaee-api:9.1.0'
  implementation 'jakarta.validation:jakarta.validation-api:2.0.2'

  implementation 'org.postgresql:postgresql:42.7.4'
  implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
  implementation 'org.hibernate:hibernate-core:6.2.8.Final'

  implementation 'at.favre.lib:bcrypt:0.10.2'
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

  compileOnly 'org.projectlombok:lombok:1.18.36'
  annotationProcessor 'org.projectlombok:lombok:1.18.36'

  testCompileOnly 'org.projectlombok:lombok:1.18.36'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

  functionalTestImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  functionalTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
  functionalTestImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
}

test {
  useJUnitPlatform()
}